"Indicates what fields are available at the top level of a query operation."
type Query {
  "Find a single user by an identifying attribute."
  user(
    "Search by primary key."
    id: ID

    "Search by email address."
    email: String
  ): User

  mostPopularCity: City!

  "Get the current user"
  me: User

  "Find an auditorium by an identifying attribute."
  auditorium(
    "Search by primary key."
    id: ID

    slug: String
  ): Auditorium

  "Find a theater by an identifying attribute."
  theater(
    "Search by primary key."
    id: ID

    slug: String
  ): Theater

  "Find a theater chain by an identifying attribute."
  theaterChain(
    "Search by primary key."
    id: ID
  ): TheaterChain

  "Find a user-rating for auditorium by an identifying attribute."
  rating(
    "Search by primary key."
    id: ID
  ): Rating

  searchMovies(query: String!): [Movie]

  "List multiple users."
  users(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): UserPaginator!

  "List multiple states."
  states(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    uf: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): StatePaginator!

  "List multiple cities."
  cities(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    slug: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CityPaginator!

  "List multiple auditoriums."
  auditoriums(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    slug: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): AuditoriumPaginator!

  "List multiple theaters."
  theaters(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    city_id: ID

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): TheaterPaginator!

  "List multiple theater chains."
  theaterChains(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): TheaterChainPaginator!

  "List multiple user-rating for auditorium."
  ratings(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): RatingPaginator!
}

type Mutation {
  "Log in to a new session and get the user."
  login(email: String!, password: String!): User!

  "Log out from the current session, showing the user one last time."
  logout: User

  "Register a new user"
  createUser(name: String!, email: String!, password: String!): User

  "Creates a new theater chain."
  createTheaterChain(input: CreateTheaterChainInput!): TheaterChain!

  "Creates a new theater in a theater chain."
  createTheater(input: CreateTheaterInput!): Theater!

  "Creates a new auditorium in a theater."
  createAuditorium(input: CreateAuditoriumInput!): Auditorium!

  "Creates a new rating for an auditorium."
  createRating(input: CreateRatingInput!): Rating!

  "Submits a contact message."
  contact(name: String!, phone_number: String!, email: String!, message: String!): Boolean!
}

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date

input CreateTheaterInput {
  name: String!
  theaterChain: TheaterChainBelongsTo!
}

input TheaterChainBelongsTo {
  connect: ID
  create: CreateTheaterChainInput
  update: UpdateTheaterChainInput
  upsert: UpsertTheaterChainInput
}

input CreateTheaterChainInput {
  name: String!
}

input UpdateTheaterChainInput {
  name: String!
}

input UpsertTheaterChainInput {
  name: String!
}

input TheaterBelongsTo {
  connect: ID
  create: CreateTheaterInput
  update: UpdateTheaterInput
  upsert: UpsertTheaterInput
}

input UpdateTheaterInput {
  name: String!
}

input UpsertTheaterInput {
  name: String!
}

input AuditoriumBelongsTo {
  connect: ID
  create: CreateAuditoriumInput
  update: UpdateAuditoriumInput
  upsert: UpsertAuditoriumInput
}

input CreateAuditoriumInput {
  name: String!
  theater: TheaterBelongsTo!
}

input UpdateAuditoriumInput {
  name: String
  theater: TheaterBelongsTo
}

input UpsertAuditoriumInput {
  name: String!
  theater: TheaterBelongsTo!
}

input UserBelongsTo {
  connect: ID
}

input CreateRatingInput {
  auditorium_id: Int!
  image_rating: Int
  audio_rating: Int
  comfort_rating: Int
  bomboniere_rating: Int
  experience_rating: Int
  review: String
  visited_at: Date!
  tmdb_movie_id: Int!
  seat: String
  seat_rating: Int
}

"Account of a person who utilizes this application."
type User {
  id: ID!
  name: String!
  email: String!
  email_verified_at: DateTime
  ratings: [Rating!]!
  created_at: DateTime!
  updated_at: DateTime!
}

"State in the country."
type State {
  id: ID!
  name: String!
  uf: String!
  cities: [City!]!
  created_at: DateTime!
  updated_at: DateTime!
}

"City in a state."
type City {
  id: ID!
  name: String!
  slug: String!
  state: State!
  theaters: [Theater!]!
  created_at: DateTime!
  updated_at: DateTime!
}

"A theater chain with theaters."
type TheaterChain {
  id: ID!
  name: String!
  slug: String!
  theaters: [Theater!]!
  created_at: DateTime!
  updated_at: DateTime!
}

"A theater from a chain."
type Theater {
  id: ID!
  name: String!
  slug: String!
  address: String!
  theaterChain: TheaterChain!
  city: City!
  auditoriums(slug: String): [Auditorium!]!
  auditoriums_count: Int!
  created_at: DateTime!
  updated_at: DateTime!
}

"A theater's auditorium room."
type Auditorium {
  id: ID!
  name: String!
  slug: String!
  description: String!
  theater: Theater!
  ratings: [Rating!]!
  image_rating: Float
  image_rating_count: Int!
  audio_rating: Float
  audio_rating_count: Int!
  comfort_rating: Float
  comfort_rating_count: Int!
  bomboniere_rating: Float
  bomboniere_rating_count: Int!
  experience_rating: Float
  experience_rating_count: Int!
  ratings_count: Int!
  featured_image: Media
  created_at: DateTime!
  updated_at: DateTime!
}

"A user rating for an auditorium."
type Rating {
  id: ID!
  user: User!
  auditorium: Auditorium!
  image_rating: Int
  audio_rating: Int
  comfort_rating: Int
  bomboniere_rating: Int
  experience_rating: Int
  review: String
  visited_at: Date!
  movie_watched: Movie!
  seat: String
  seat_rating: Int
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
}

"A movie from tmdb."
type Movie {
  id: ID!
  tmdb_id: Int!
  title: String!
  original_title: String!
  overview: String!
  release_date: Date!
  poster_url: String
  tmdb_post_path: String
  created_at: DateTime!
  updated_at: DateTime!
}

type Media {
  original_url: String!
}

"A paginated list of User items."
type UserPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of User items."
  data: [User!]!
}

"A paginated list of State items."
type StatePaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of State items."
  data: [State!]!
}

"A paginated list of City items."
type CityPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of City items."
  data: [City!]!
}

"A paginated list of Auditorium items."
type AuditoriumPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of Auditorium items."
  data: [Auditorium!]!
}

"A paginated list of Theater items."
type TheaterPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of Theater items."
  data: [Theater!]!
}

"A paginated list of TheaterChain items."
type TheaterChainPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of TheaterChain items."
  data: [TheaterChain!]!
}

"A paginated list of Rating items."
type RatingPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of Rating items."
  data: [Rating!]!
}

"Directions for ordering a list of records."
enum SortOrder {
  "Sort records in ascending order."
  ASC

  "Sort records in descending order."
  DESC
}

"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
  "Amount of items."
  COUNT
}

"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
  "Average."
  AVG

  "Minimum."
  MIN

  "Maximum."
  MAX

  "Sum."
  SUM

  "Amount of items."
  COUNT
}

"Allows ordering a list of records."
input OrderByClause {
  "The column that is used for ordering."
  column: String!

  "The direction that is used for ordering."
  order: SortOrder!
}

"Information about pagination using a fully featured paginator."
type PaginatorInfo {
  "Number of items in the current page."
  count: Int!

  "Index of the current page."
  currentPage: Int!

  "Index of the first item in the current page."
  firstItem: Int

  "Are there more pages after this one?"
  hasMorePages: Boolean!

  "Index of the last item in the current page."
  lastItem: Int

  "Index of the last available page."
  lastPage: Int!

  "Number of items per page."
  perPage: Int!

  "Number of total available items."
  total: Int!
}

"Information about pagination using a simple paginator."
type SimplePaginatorInfo {
  "Number of items in the current page."
  count: Int!

  "Index of the current page."
  currentPage: Int!

  "Index of the first item in the current page."
  firstItem: Int

  "Index of the last item in the current page."
  lastItem: Int

  "Number of items per page."
  perPage: Int!

  "Are there more pages after this one?"
  hasMorePages: Boolean!
}

"Information about pagination using a Relay style cursor connection."
type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!

  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!

  "The cursor to continue paginating backwards."
  startCursor: String

  "The cursor to continue paginating forwards."
  endCursor: String

  "Total number of nodes in the paginated connection."
  total: Int!

  "Number of nodes in the current page."
  count: Int!

  "Index of the current page."
  currentPage: Int!

  "Index of the last available page."
  lastPage: Int!
}

"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
  "Only return trashed results."
  ONLY

  "Return both trashed and non-trashed results."
  WITH

  "Only return non-trashed results."
  WITHOUT
}
